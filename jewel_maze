#include<bits/stdc++.h>
using namespace std;
int n,ans=0;
bool valid(int i,int j){
    if(i<0||i>=n||j<0||j>=n){
        return false;
    }
    return true;
}
void printmatrix(int **path){
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cout<<path[i][j]<<" ";
        }
        cout<<endl;
    }
}
int dir[4][2]={{-1,0},{1,0},{0,-1},{0,1}};
void dfs(int i,int j,int cnt,int **arr,int **visited,int **path){
    if(i==n-1&&j==n-1){
        if(cnt>ans){
            ans=cnt;
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if(visited[i][j]){
                        path[i][j]=3;
                    }
                    else{
                        path[i][j]=arr[i][j];
                    }
                }
            }
        }
    }
    for(int k=0;k<4;k++){
        int nx=i+dir[k][0];
        int ny=j+dir[k][1];
        if(valid(nx,ny)){
            if(visited[nx][ny]==0&&arr[nx][ny]==2){
                visited[nx][ny]=1;
                dfs(nx,ny,cnt+1,arr,visited,path);
                visited[nx][ny]=0;
            }
            if(visited[nx][ny]==0&&arr[nx][ny]==0){
                visited[nx][ny]=1;
                dfs(nx,ny,cnt,arr,visited,path);
                visited[nx][ny]=0;
            }
        }
    }
    
    
}
int main() {
  int t;
  cin>>t;
  while(t--){
      cin>>n;
      int **path=new int*[n];
      for(int j=0;j<n;j++){
          path[j]=new int[n];
      }
      int **arr=new int*[n];
      for(int j=0;j<n;j++){
          arr[j]=new int[n];
      }
      int **visited=new int*[n];
      for(int j=0;j<n;j++){
          visited[j]=new int[n];
      }
      for(int j=0;j<n;j++){
          for(int k=0;k<n;k++){
              cin>>arr[j][k];
              path[j][k]=0;
              visited[j][k]=0;
          }
      }
      ans=0;
      visited[0][0]=1;
      if(arr[0][0]==2){
          dfs(0,0,1,arr,visited,path);
      }
      else{
          dfs(0,0,0,arr,visited,path);
      }
     cout<<ans<<endl;
     printmatrix(path);
  }  
}
