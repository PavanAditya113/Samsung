#include<bits/stdc++.h>
using namespace std;


struct point{
    int x,y;
};
point p0;

point nexttotop(stack<point>&s){
    point p=s.top();
    s.pop();
    point res=s.top();
    s.push(p);
    return res;
}
void swap(point &p1,point &p2){
    point temp=p2;
    p2=p1;
    p1=temp;
}
int dist(point p1,point p2){
    return (p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y);
}
int orientation(point p,point q,point r){
    int val=(q.y-p.y)*(r.x-q.x)-(q.x-p.x)*(r.y-q.y);
    if(val==0){
        return 0;
    }
   if(val>0){
       return 1;
   }
    return 2;
}
int compare(point &p1,point &p2){
   
    int o=orientation(p0,p1,p2);
    if(o==0){
        return dist(p0,p2)>=dist(p0,p1);
    }
    return o==2;
}
void convexhull(point points[],int n){
    int ymin=points[0].y;
    int min=0;
    for(int j=1;j<n;j++){
        if(points[j].y<ymin||points[j].y==ymin&&points[j].x<points[min].x){
            ymin=points[j].y;
            min=j;
        }
    }
    swap(points[0],points[min]);
    p0=points[0];
    sort(points+1,points+n,compare);
    vector<point>v;
    v.push_back(points[0]);
    for(int i=1;i<n;i++){
        while(i<n-1&&orientation(p0,points[i],points[i+1])==0){
            i++;
        }
        v.push_back(points[i]);
    }
    if(v.size()<3){
        return;
    }
    stack<point>s;
    s.push(v[0]);
    s.push(v[1]);
    s.push(v[2]);
    for(int j=3;j<v.size();j++){
        while(s.size()&&orientation(nexttotop(s),s.top(),v[j])!=2){
            s.pop();
        }
        s.push(v[j]);
    }
    while(!s.empty()){
        point p=s.top();
        cout<<p.x<<" "<<p.y<<endl;
        s.pop();
    }
    
}
int main()
{
    point points[] = {{0, 3}, {1, 1}, {2, 2}, {4, 4},
                      {0, 0}, {1, 2}, {3, 1}, {3, 3}};
    int n = sizeof(points)/sizeof(points[0]);
    convexhull(points, n);
}
